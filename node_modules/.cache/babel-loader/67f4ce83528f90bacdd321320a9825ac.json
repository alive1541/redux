{"ast":null,"code":"export default function createStore(reducer, preloadedState, enhancer) {\n  if (enhancer) {\n    return enhancer(createStore)(reducer, preloadedState);\n  }\n\n  let currentState = preloadedState;\n  let currentListeners = [];\n  let nextListeners = currentListeners; //getState\n\n  function getState() {\n    return currentState;\n  } //dispatch\n\n\n  function dispatch(action) {\n    currentState = currentReducer(currentState, action);\n    currentListeners = nextListeners;\n\n    for (let i = 0; i < currentListeners.length; i++) {\n      const listener = currentListeners[i];\n      listener();\n    }\n\n    return action;\n  } //subscribe\n\n\n  function subscribe(listener) {\n    let isSubscribed = true;\n    ensureCanMutateNextListeners();\n    nextListeners.push(listener);\n    return function unsubscribe() {\n      if (!isSubscribed) {\n        return;\n      }\n\n      isSubscribed = false;\n      ensureCanMutateNextListeners();\n      const index = nextListeners.indexOf(listener);\n      nextListeners.splice(index, 1);\n    };\n  }\n\n  function ensureCanMutateNextListeners() {\n    if (nextListeners === currentListeners) {\n      nextListeners = currentListeners.slice();\n    }\n  }\n\n  return {\n    dispatch,\n    subscribe,\n    getState\n  };\n}","map":{"version":3,"sources":["/Users/didi/Desktop/fresh-man-learn/redux/test/src/redux/createStore.js"],"names":["createStore","reducer","preloadedState","enhancer","currentState","currentListeners","nextListeners","getState","dispatch","action","currentReducer","i","length","listener","subscribe","isSubscribed","ensureCanMutateNextListeners","push","unsubscribe","index","indexOf","splice","slice"],"mappings":"AAEA,eAAe,SAASA,WAAT,CAAqBC,OAArB,EAA8BC,cAA9B,EAA8CC,QAA9C,EAAwD;AAEnE,MAAGA,QAAH,EAAa;AACT,WAAOA,QAAQ,CAACH,WAAD,CAAR,CAAsBC,OAAtB,EAA+BC,cAA/B,CAAP;AACH;;AAED,MAAIE,YAAY,GAAGF,cAAnB;AACA,MAAIG,gBAAgB,GAAG,EAAvB;AACA,MAAIC,aAAa,GAAGD,gBAApB,CARmE,CAUnE;;AACA,WAASE,QAAT,GAAoB;AAChB,WAAOH,YAAP;AACH,GAbkE,CAenE;;;AACA,WAASI,QAAT,CAAkBC,MAAlB,EAA0B;AAEtBL,IAAAA,YAAY,GAAGM,cAAc,CAACN,YAAD,EAAeK,MAAf,CAA7B;AAEAJ,IAAAA,gBAAgB,GAAGC,aAAnB;;AAEA,SAAI,IAAIK,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGN,gBAAgB,CAACO,MAApC,EAA4CD,CAAC,EAA7C,EAAiD;AAC7C,YAAME,QAAQ,GAAGR,gBAAgB,CAACM,CAAD,CAAjC;AACAE,MAAAA,QAAQ;AACX;;AAED,WAAOJ,MAAP;AACH,GA5BkE,CA8BnE;;;AACA,WAASK,SAAT,CAAmBD,QAAnB,EAA6B;AACzB,QAAIE,YAAY,GAAG,IAAnB;AAEAC,IAAAA,4BAA4B;AAC5BV,IAAAA,aAAa,CAACW,IAAd,CAAmBJ,QAAnB;AAEA,WAAO,SAASK,WAAT,GAAuB;AAC1B,UAAG,CAACH,YAAJ,EAAkB;AACd;AACH;;AAEDA,MAAAA,YAAY,GAAG,KAAf;AAEAC,MAAAA,4BAA4B;AAC5B,YAAMG,KAAK,GAAGb,aAAa,CAACc,OAAd,CAAsBP,QAAtB,CAAd;AACAP,MAAAA,aAAa,CAACe,MAAd,CAAqBF,KAArB,EAA4B,CAA5B;AACH,KAVD;AAWH;;AAED,WAASH,4BAAT,GAAwC;AACpC,QAAIV,aAAa,KAAKD,gBAAtB,EAAwC;AACtCC,MAAAA,aAAa,GAAGD,gBAAgB,CAACiB,KAAjB,EAAhB;AACD;AACF;;AAIH,SAAO;AACHd,IAAAA,QADG;AAEHM,IAAAA,SAFG;AAGHP,IAAAA;AAHG,GAAP;AAKH","sourcesContent":["\n\nexport default function createStore(reducer, preloadedState, enhancer) {\n\n    if(enhancer) {\n        return enhancer(createStore)(reducer, preloadedState)\n    }\n\n    let currentState = preloadedState\n    let currentListeners = []\n    let nextListeners = currentListeners\n\n    //getState\n    function getState() {\n        return currentState\n    }\n\n    //dispatch\n    function dispatch(action) {\n\n        currentState = currentReducer(currentState, action)\n\n        currentListeners = nextListeners\n\n        for(let i = 0; i < currentListeners.length; i++) {\n            const listener = currentListeners[i]\n            listener()\n        }\n\n        return action\n    } \n\n    //subscribe\n    function subscribe(listener) {\n        let isSubscribed = true\n\n        ensureCanMutateNextListeners()\n        nextListeners.push(listener)\n\n        return function unsubscribe() {\n            if(!isSubscribed) {\n                return\n            }\n\n            isSubscribed = false\n\n            ensureCanMutateNextListeners()\n            const index = nextListeners.indexOf(listener)\n            nextListeners.splice(index, 1)\n        }\n    }\n\n    function ensureCanMutateNextListeners() {\n        if (nextListeners === currentListeners) {\n          nextListeners = currentListeners.slice()\n        }\n      }\n\n\n\n    return {\n        dispatch,\n        subscribe,\n        getState\n    }\n}"]},"metadata":{},"sourceType":"module"}