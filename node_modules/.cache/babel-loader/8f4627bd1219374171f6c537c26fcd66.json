{"ast":null,"code":"export default function combineReducers(reducers) {\n  const reducersKeys = Object.keys(reducers);\n  const finalReducers = {};\n  checkReducersType(reducersKeys, finalReducers);\n  const finalReducersKey = Object.keys(finalReducers);\n  return function combination(state = {}, action) {\n    let hasChanged = false;\n    const nextState = {};\n\n    for (let i = 0; i < finalReducersKey.length; i++) {\n      const key = finalReducersKey[i];\n      const reducer = finalReducers[key];\n      const previousStateForKey = state[key];\n      const nextStateForKey = reducer(previousStateForKey, action);\n      nextState[key] = nextStateForKey;\n      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;\n    }\n\n    return hasChanged ? nextState : state;\n  };\n}\n\nfunction checkReducersType(reducersKeys, finalReducers) {\n  for (let i = 0; i < reducersKeys.length; i++) {\n    const key = reducersKeys[i];\n\n    if (typeof reducers[key] === 'function') {\n      finalReducers[key] = reducers[key];\n    }\n  }\n}","map":{"version":3,"sources":["/Users/didi/Desktop/fresh-man-learn/redux/test/src/redux/combineReducers.js"],"names":["combineReducers","reducers","reducersKeys","Object","keys","finalReducers","checkReducersType","finalReducersKey","combination","state","action","hasChanged","nextState","i","length","key","reducer","previousStateForKey","nextStateForKey"],"mappings":"AACA,eAAe,SAASA,eAAT,CAAyBC,QAAzB,EAAmC;AAC9C,QAAMC,YAAY,GAAGC,MAAM,CAACC,IAAP,CAAYH,QAAZ,CAArB;AACA,QAAMI,aAAa,GAAG,EAAtB;AACAC,EAAAA,iBAAiB,CAACJ,YAAD,EAAeG,aAAf,CAAjB;AAEA,QAAME,gBAAgB,GAAGJ,MAAM,CAACC,IAAP,CAAYC,aAAZ,CAAzB;AAEA,SAAO,SAASG,WAAT,CAAqBC,KAAK,GAAG,EAA7B,EAAiCC,MAAjC,EAAyC;AAC5C,QAAIC,UAAU,GAAG,KAAjB;AACA,UAAMC,SAAS,GAAG,EAAlB;;AACA,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGN,gBAAgB,CAACO,MAApC,EAA4CD,CAAC,EAA7C,EAAiD;AAC7C,YAAME,GAAG,GAAGR,gBAAgB,CAACM,CAAD,CAA5B;AACA,YAAMG,OAAO,GAAGX,aAAa,CAACU,GAAD,CAA7B;AACA,YAAME,mBAAmB,GAAGR,KAAK,CAACM,GAAD,CAAjC;AACA,YAAMG,eAAe,GAAGF,OAAO,CAACC,mBAAD,EAAsBP,MAAtB,CAA/B;AACAE,MAAAA,SAAS,CAACG,GAAD,CAAT,GAAiBG,eAAjB;AACAP,MAAAA,UAAU,GAAGA,UAAU,IAAIO,eAAe,KAAKD,mBAA/C;AACH;;AACD,WAAON,UAAU,GAAGC,SAAH,GAAeH,KAAhC;AACH,GAZD;AAaH;;AAGD,SAASH,iBAAT,CAA2BJ,YAA3B,EAAyCG,aAAzC,EAAwD;AACpD,OAAI,IAAIQ,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGX,YAAY,CAACY,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AACzC,UAAME,GAAG,GAAGb,YAAY,CAACW,CAAD,CAAxB;;AACA,QAAG,OAAOZ,QAAQ,CAACc,GAAD,CAAf,KAAyB,UAA5B,EAAwC;AACpCV,MAAAA,aAAa,CAACU,GAAD,CAAb,GAAqBd,QAAQ,CAACc,GAAD,CAA7B;AACH;AACJ;AACJ","sourcesContent":["\nexport default function combineReducers(reducers) {\n    const reducersKeys = Object.keys(reducers)\n    const finalReducers = {}\n    checkReducersType(reducersKeys, finalReducers)\n\n    const finalReducersKey = Object.keys(finalReducers)\n\n    return function combination(state = {}, action) {\n        let hasChanged = false\n        const nextState = {}\n        for(let i = 0; i < finalReducersKey.length; i++) {\n            const key = finalReducersKey[i]\n            const reducer = finalReducers[key]\n            const previousStateForKey = state[key]\n            const nextStateForKey = reducer(previousStateForKey, action)\n            nextState[key] = nextStateForKey\n            hasChanged = hasChanged || nextStateForKey !== previousStateForKey\n        }\n        return hasChanged ? nextState : state\n    }\n}\n\n\nfunction checkReducersType(reducersKeys, finalReducers) {\n    for(let i = 0; i < reducersKeys.length; i++) {\n        const key = reducersKeys[i]\n        if(typeof reducers[key] === 'function') {\n            finalReducers[key] = reducers[key]\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}